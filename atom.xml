<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sunkist的blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-28T10:41:02.938Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>sunkist</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux文件管理命令笔记</title>
    <link href="http://yoursite.com/2018/05/28/linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/05/28/linux文件管理命令笔记/</id>
    <published>2018-05-28T09:53:20.000Z</published>
    <updated>2018-05-28T10:41:02.938Z</updated>
    
    <content type="html"><![CDATA[<p>本篇笔记主要是介绍linux文件管理命令中关于文件复制、剪切、移动的内容</p><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><ul><li>用途：<ul><li>复制文件到指定位置<br>&nbsp;     </li></ul></li><li>用法：<ul><li>cp 源 目标<br>&nbsp;</li></ul></li><li>使用规则:<ul><li>cp file1 file2 file3 //前面个默认都为源，最后一个是目标</li><li>只能支持复制一个文件到一个文件，多个文件到一个目录，不允许合并文件</li><li>如果目标是一个目录并且存在，将源文件复制目标目录，并且保持原名</li><li>如果目标和源都是文件，且目标文件存在，将源文件复制过来覆盖目标文件内容</li><li>如果源是多个，目标必须是目录</li><li>源默认情况向不能使目录，只能是文件<br>&nbsp;</li></ul></li><li>相关选项：<ul><li>cp -r：递归选项，能够把目录作为源<ul><li>如果源是目录，目标是文件，则这个文件作为符号链接指向源目录</li><li>如果源是目录，目标的名字不存在，相当于把源目录复制过去并且更改为目标名字</li></ul></li><li>cp -f：强制复制，不询问是否更改</li><li>cp -i：和-f完全相反，询问是否更改</li><li>cp -p：复制时保留时间戳、属主、属组</li><li>cp -L：取消链接，直接复制文件（直接复制符号链接得到的还是符号链接）</li><li>cp -P：保留链接，复制链接（相当于默认）</li><li>cp -a：归档复制，常用于备份</li></ul></li></ul><hr><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><ul><li>用途：<ul><li>移动文件<br>&nbsp;</li></ul></li><li>用法：<ul><li>mv 源 目标<br>&nbsp;</li></ul></li><li>使用规则：<ul><li>使用mv操作目录不需要像cp一样附加-r选项 </li><li>不能把目录mv到文件</li><li>mv a b：相当于把a文件重命名为b文件<br>&nbsp;</li></ul></li><li>相关选项：<ul><li>mv -t：交换目标和源的位置<br>&nbsp;</li></ul></li></ul><hr><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><ul><li>用途：<ul><li>复制文件并且更改属性<br>&nbsp;</li></ul></li><li>用法：<ul><li>install 源 目标<br>&nbsp;</li></ul></li><li>使用规则：<ul><li>install的源不能是目录，只能是文件</li></ul></li><li>相关选项：<ul><li>install -d：创建目录</li><li>install -t 目标 源：可以把多个文件复制到目录</li></ul></li></ul><hr><p>注：对于超级用户来讲，权限过大容易因为错误操作而造成损失，所以很多命令如cp、mv都有默认的-i选项，提示是否确定进行操作，这些默认选项可以使用type进行查看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇笔记主要是介绍linux文件管理命令中关于文件复制、剪切、移动的内容&lt;/p&gt;
&lt;h2 id=&quot;cp&quot;&gt;&lt;a href=&quot;#cp&quot; class=&quot;headerlink&quot; title=&quot;cp&quot;&gt;&lt;/a&gt;cp&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用途：&lt;ul&gt;
&lt;li&gt;复制文件到指定位
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="linux命令" scheme="http://yoursite.com/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络自顶而下方法第一章思维导图</title>
    <link href="http://yoursite.com/2018/05/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E8%80%8C%E4%B8%8B%E6%96%B9%E6%B3%95%E7%AC%AC%E4%B8%80%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/05/28/计算机网络自顶而下方法第一章思维导图/</id>
    <published>2018-05-27T23:47:30.000Z</published>
    <updated>2018-05-27T23:48:26.023Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://pic.yupoo.com/sunkiist/HnbCw46D/AGksw.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/sunkiist/HnbCw46D/AGksw.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="计算机网络自顶而下方法" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E8%80%8C%E4%B8%8B%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer第八章思维导图</title>
    <link href="http://yoursite.com/2018/05/27/C-primer%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/05/27/C-primer第八章思维导图/</id>
    <published>2018-05-27T09:48:23.000Z</published>
    <updated>2018-05-27T09:52:05.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标签：-C-思维导图"><a href="#标签：-C-思维导图" class="headerlink" title="标签： C++ 思维导图"></a>标签： C++ 思维导图</h2><p><img src="http://pic.yupoo.com/sunkiist/Hn67OuZm/Wulx0.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;标签：-C-思维导图&quot;&gt;&lt;a href=&quot;#标签：-C-思维导图&quot; class=&quot;headerlink&quot; title=&quot;标签： C++ 思维导图&quot;&gt;&lt;/a&gt;标签： C++ 思维导图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/sun
      
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer第七章思维导图</title>
    <link href="http://yoursite.com/2018/05/27/C-primer%E7%AC%AC%E4%B8%83%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/05/27/C-primer第七章思维导图/</id>
    <published>2018-05-27T09:41:57.000Z</published>
    <updated>2018-05-27T09:43:46.123Z</updated>
    
    <content type="html"><![CDATA[<p>标签 ： C++ 思维导图</p><hr><p><img src="http://pic.yupoo.com/sunkiist/Hn64W4Bu/bB9NR.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;标签 ： C++ 思维导图&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/sunkiist/Hn64W4Bu/bB9NR.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer第六章思维导图</title>
    <link href="http://yoursite.com/2018/05/27/C-primer%E7%AC%AC%E5%85%AD%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/05/27/C-primer第六章思维导图/</id>
    <published>2018-05-27T07:46:36.000Z</published>
    <updated>2018-05-27T07:47:47.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标签-：-C-思维导图"><a href="#标签-：-C-思维导图" class="headerlink" title="标签 ： C++ 思维导图"></a>标签 ： C++ 思维导图</h2><p><img src="http://pic.yupoo.com/sunkiist/Hn5jXHD6/pUkwR.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;标签-：-C-思维导图&quot;&gt;&lt;a href=&quot;#标签-：-C-思维导图&quot; class=&quot;headerlink&quot; title=&quot;标签 ： C++ 思维导图&quot;&gt;&lt;/a&gt;标签 ： C++ 思维导图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com
      
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer第四章思维导图</title>
    <link href="http://yoursite.com/2018/05/24/C-primer%E7%AC%AC%E5%9B%9B%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/05/24/C-primer第四章思维导图/</id>
    <published>2018-05-24T15:04:07.000Z</published>
    <updated>2018-05-24T16:18:40.908Z</updated>
    
    <content type="html"><![CDATA[<p>标签 ： C++ 思维导图</p><hr><p><img src="http://pic.yupoo.com/sunkiist/HmLMW1Q1/ulqYi.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;标签 ： C++ 思维导图&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/sunkiist/HmLMW1Q1/ulqYi.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer第二章思维导图</title>
    <link href="http://yoursite.com/2018/05/24/C-primer%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/05/24/C-primer第二章思维导图/</id>
    <published>2018-05-24T12:35:49.000Z</published>
    <updated>2018-05-24T16:18:40.906Z</updated>
    
    <content type="html"><![CDATA[<p>标签 ： C++ 思维导图</p><hr><p><img src="http://pic.yupoo.com/sunkiist/HmKOQpJv/10a0V8.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;标签 ： C++ 思维导图&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/sunkiist/HmKOQpJv/10a0V8.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer第八章笔记</title>
    <link href="http://yoursite.com/2018/05/18/C++%20primer%E7%AC%AC%E5%85%AB%E7%AB%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/05/18/C++ primer第八章笔记/</id>
    <published>2018-05-18T14:28:41.754Z</published>
    <updated>2018-05-19T09:34:56.008Z</updated>
    
    <content type="html"><![CDATA[<p>标签 ： C++ 读书笔记</p><hr><h1 id="IO库"><a href="#IO库" class="headerlink" title="IO库"></a>IO库</h1><h2 id="IO库是用来做什么的"><a href="#IO库是用来做什么的" class="headerlink" title="IO库是用来做什么的"></a>IO库是用来做什么的</h2><blockquote><p>处理输入输出，向设备读取或者写入数据，这些设备可以是文件、控制台窗口、string</p></blockquote><h2 id="IO库有哪些设施"><a href="#IO库有哪些设施" class="headerlink" title="IO库有哪些设施"></a>IO库有哪些设施</h2><p><img src="http://pic.yupoo.com/sunkiist/HlLicIHw/7jNUH.png" alt="图片"></p><h2 id="IO类型间的关系"><a href="#IO类型间的关系" class="headerlink" title="IO类型间的关系"></a>IO类型间的关系</h2><p>无论是从控制台、文件读取对象；还是读取char或者string对象都使用一样的IO操作，这是因为IO标准库定义了<strong>继承机制</strong>，继承机制有一个特点就是派生类对象能像基类对象一样使用。</p><p>因为iftream和istringstream都继承自istream，所以ifstream和istringstream对象的很多操作和istream一样，但是派生类也会有一些不同于基类的新功能。</p><h1 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h1><h2 id="IO库特性"><a href="#IO库特性" class="headerlink" title="IO库特性"></a>IO库特性</h2><blockquote><p>IO对象无拷贝或者赋值（函数的形参和返回类型不能是IO类型）<br>进行IO操作的函数通常以引用方式传递流类型<br>因为读写会改变IO所以传递返回的引用不能够是const类型</p></blockquote><h2 id="IO库的条件状态"><a href="#IO库的条件状态" class="headerlink" title="IO库的条件状态"></a>IO库的条件状态</h2><p>IO库的条件状态能够表示IO流是否出错，错误类型是什么，能否修复。<br>类型：</p><blockquote><p>iostate 表示条件状态<br>cin.rdstate() 返回iostate<br>badbit 表示系统级错误，一旦被置位不可用,此时failbit 也被置位<br>failbit 表示可恢复错误（比如输入类型不对）<br>eofbit 达到文件结束，同时 failbit也会被置位<br>goodbit 表示流未发生错误<br>cin.bad() 如果badbit被置位返回true</p></blockquote><p>注意：<br>badbit,failbit,eofbit任意一个被置位则流的状态检验<strong>while(cin&gt;&gt;word)</strong>会失败.<br><strong>while(cin&gt;&gt;word)</strong>相当于<strong>while(!=fail())</strong></p><h2 id="管理条件状态"><a href="#管理条件状态" class="headerlink" title="管理条件状态"></a>管理条件状态</h2><h3 id="记录当前状态"><a href="#记录当前状态" class="headerlink" title="记录当前状态"></a>记录当前状态</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> old_state=<span class="built_in">cin</span>.rdstate();<span class="comment">//记住cin的当前状态</span></span><br></pre></td></tr></table></figure><h3 id="置为原有状态"><a href="#置为原有状态" class="headerlink" title="置为原有状态"></a>置为原有状态</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>.setstate(old_state);<span class="comment">//将cin还原为原有状态</span></span><br></pre></td></tr></table></figure><h3 id="清除所有错误标志位"><a href="#清除所有错误标志位" class="headerlink" title="清除所有错误标志位"></a>清除所有错误标志位</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>.clear();<span class="comment">//此时调用good会返回true</span></span><br></pre></td></tr></table></figure><h3 id="复位单一的状态位"><a href="#复位单一的状态位" class="headerlink" title="复位单一的状态位"></a>复位单一的状态位</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>.clear(<span class="built_in">cin</span>.rdstate() &amp; ~<span class="built_in">cin</span>.failbit &amp; ~<span class="built_in">cin</span>.badbit);<span class="comment">//第一位读出当前状态，后面的按位复位</span></span><br></pre></td></tr></table></figure><h2 id="管理输出缓冲"><a href="#管理输出缓冲" class="headerlink" title="管理输出缓冲"></a>管理输出缓冲</h2><h3 id="为什么有缓冲区："><a href="#为什么有缓冲区：" class="headerlink" title="为什么有缓冲区："></a>为什么有缓冲区：</h3><p>因为设备的写操作很费时，所以把多个输出操作组合成单一的写操作可以带来性能提升，由此引入缓冲区为多个输出操作提供缓存。</p><p>比如:cout&lt;&lt;”hello”  字符串”hello”有可能被放入缓冲区</p><h3 id="缓冲区刷新的原因："><a href="#缓冲区刷新的原因：" class="headerlink" title="缓冲区刷新的原因："></a>缓冲区刷新的原因：</h3><blockquote><p>main函数return时<br>缓冲区满的时候，为了写入新的数据<br>显式刷新<br>关联流，会导致关联到的流刷新（cin和cerr关联cout，刷新时cout刷新）</p></blockquote><p>注：程序崩溃，缓冲区不会刷新，所以不会打印</p><h3 id="缓冲区显式刷新的例子"><a href="#缓冲区显式刷新的例子" class="headerlink" title="缓冲区显式刷新的例子"></a>缓冲区显式刷新的例子</h3><blockquote><p>endl 打印换行后刷新<br>flush 直接刷新<br>ends 打印空格后刷新<br>unitbuf 每次写立即刷新缓冲区<br>nounitbuf 回到正常模式</p></blockquote><h1 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h1><p>文件输入输出由fstream头文件管理，fstream由于继承自iostream所以大部分操作和iostream一样，但是有一些新的成员来管理文件</p><h2 id="fstream特有操作"><a href="#fstream特有操作" class="headerlink" title="fstream特有操作"></a>fstream特有操作</h2><blockquote><p>fstream f1; //定义一个未绑定的文件流f1<br>fstream f1(s); //把名为s的文件绑定到文件流f1<br>f1.open(s1); //与上同<br>f1.close();</p></blockquote><p>注：接收ostream&amp;的参数可以传递ofstream</p><h3 id="成员函数open和close"><a href="#成员函数open和close" class="headerlink" title="成员函数open和close"></a>成员函数open和close</h3><p>检查open打开文件是否成功<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ofstream out;<span class="comment">//创建文件输出流</span></span><br><span class="line">out.open(file);<span class="comment">//将流与文件关联</span></span><br><span class="line"><span class="keyword">if</span>(out);<span class="comment">//检查open是否成功</span></span><br></pre></td></tr></table></figure></p><p>注：不能两次open同一个文件流，需要先close。但是如果在局部作用域如for中，则不用close因为局部作用域自动创建销毁。</p><h2 id="文件模式"><a href="#文件模式" class="headerlink" title="文件模式"></a>文件模式</h2><blockquote><p>in以读的方式打开<br>out以写的方式打开<br>app每次写操作定位到文件末尾<br>ate打开文件后定位到文件末尾<br>trunc截断文件<br>binary以二进制的方式进行IO</p></blockquote><h3 id="ofstram默认被截断"><a href="#ofstram默认被截断" class="headerlink" title="ofstram默认被截断"></a>ofstram默认被截断</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"file1"</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"file1"</span>,ofstream::out)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"file1"</span>,ofstream::out|ofstream::trunc)</span></span>;<span class="comment">//以上三种均被截断</span></span><br><span class="line">......................................................................................</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"file1"</span>,ofstream::out|ofstream::app)</span></span>;</span><br><span class="line"></span><br><span class="line">ofstream out;</span><br><span class="line">out.open(<span class="string">"file1"</span>,ofstream::app);<span class="comment">//以上两种不会被覆盖。用app可以保留之前写的文件内容，下一次写从末尾开始</span></span><br></pre></td></tr></table></figure><h1 id="string流"><a href="#string流" class="headerlink" title="string流"></a>string流</h1><p>string流由头文件sstream管理，头文件有ostringstream、istringstream、stringstream三个类</p><h2 id="stringstream特有操作"><a href="#stringstream特有操作" class="headerlink" title="stringstream特有操作"></a>stringstream特有操作</h2><blockquote><p>sstream strm;//定义一个string流<br>sstream strm(s);//定义一个string流保存string s的一个拷贝<br>strm.str();//返回strm保存的string拷贝<br>strm.str(s);//将s这个string的拷贝保存到strm这个流对象，返回void</p></blockquote><h2 id="使用istringstream"><a href="#使用istringstream" class="headerlink" title="使用istringstream"></a>使用istringstream</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; phones;</span><br><span class="line">&#125;;<span class="comment">//定义一个结构体每个人有多个电话号码</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">string</span> line,word;</span><br><span class="line"><span class="built_in">vector</span>&lt;PersonInfo&gt; people;      <span class="comment">//用于存储多个结构体信息</span></span><br><span class="line"><span class="keyword">while</span>(getline(<span class="built_in">cin</span>,line))&#123;       <span class="comment">//每次从控制台读取一行给line这个string</span></span><br><span class="line">    PersonInfo info;            <span class="comment">//定义一个保存记录的对象</span></span><br><span class="line">    <span class="function"><span class="built_in">istringstream</span> <span class="title">record</span><span class="params">(line)</span></span>; <span class="comment">//将记录绑定到刚刚读入的行</span></span><br><span class="line">    record&gt;&gt;info.name();        <span class="comment">//读取名字</span></span><br><span class="line">    <span class="keyword">while</span>(record&gt;&gt;word)         <span class="comment">//读取多个电话号码</span></span><br><span class="line">        info.phones.push_back(word);</span><br><span class="line">    people.push_back(info);     <span class="comment">//将所有记录保存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用ostringstream"><a href="#使用ostringstream" class="headerlink" title="使用ostringstream"></a>使用ostringstream</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ostringstream</span> os;</span><br><span class="line"><span class="built_in">string</span> str1=<span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> str2=<span class="string">"world"</span>;</span><br><span class="line">os&lt;&lt;str1&lt;&lt;<span class="string">" "</span>&lt;&lt;str2;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;os.str()&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出hello world</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;标签 ： C++ 读书笔记&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;IO库&quot;&gt;&lt;a href=&quot;#IO库&quot; class=&quot;headerlink&quot; title=&quot;IO库&quot;&gt;&lt;/a&gt;IO库&lt;/h1&gt;&lt;h2 id=&quot;IO库是用来做什么的&quot;&gt;&lt;a href=&quot;#IO库是用来做什么的&quot; c
      
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
