<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于linux的一些知识]]></title>
    <url>%2F2018%2F05%2F31%2F%E5%85%B3%E4%BA%8Elinux%E5%8F%91%E8%A1%8C%E7%89%88%2F</url>
    <content type="text"><![CDATA[如何获得linux最新版本号www.kernel.org linux发行版和内核的关系linux指的是操作系统的内核，而整个操作系统是由内核、库、应用程序组成的。而这些外围的应用程序早期由GNU组织提供。而内核和这些应用程序都是源代码，源代码需要经过预处理、编译、汇编、链接才能够运行，而对于大多是系统使用者，他们没有这样的能力。所以有一些厂商就把这些源代码编译出来，并且提供一个直接能够安装的版本，这就叫发行版。 linux三大主流发行版 rehat SUSE Debianlinux其他发行版和特性 centOS和redhat基本兼容，是redhat的二次发行版，称为社区版；Fedora不是二次发行版，是实验版，用于桌面。而现在的redhat指的是redhat企业版（北美占有率高） 桌面版主要用于提高用户体验，桌面效果好，SUSE就是一个桌面非常漂亮的例子（欧洲占有率高） 基于Debian的二次发行版有ubantu，基于ubantu的二次发行版有，Mint 三大主流发行版中Debian的集成性最弱，最难用，但是最精炼（原生Debian程序）linux的系统兼容性问题编译是指把源代码转换成能够在CPU上运行的二进制机器程序的过程。因为要在硬件上运行，必须考虑硬件特性，所以其与硬件密切相关。而发行版一般是通用格式，所以发行版一般是拿到比较老的机器上编译的，因为CPU兼容老的版本，所以在老的机器上编译的版本放在新的机器上都能够跑。因为这种兼容模式，64位出现在32位后面，所以64位可以兼容32位，32位不能兼容64位。为什么要编译属于自己的版本因为我们的机器更新换代很快，不再是老的机器，而如果使用老机器上编译的操作系统就无法使用这些提升CPU效率和性能的新特性，就无法符合你的平台需要，无法发挥你全部的硬件特性。所以要发挥出硬件特性就要拿到你自己的机器上编译，并且指定一些优化参数。如何自己编译属于自己的linux版本 使用Gentoo发行版，这是一个特殊的发行版能够自己编译很多专属部分 LFS（linux for scratch）：从零构建一个linux，这是一个PDF文档，告诉你如何自我构建一个linuxlinux的基本原则 由目的单一的小程序组成：组合小程序完成复杂任务 一切皆文件 尽量避免捕获用户接口 配置文件保存为纯文本格式linux命令格式命令格式为：命令 选项 参数 命令 选项：指定命令的执行方式 短选项：- 多个选项可以组合：-a -b=-ab 长选项：– 不能组合 参数：指定命令的作用对象，这个命令对谁执行不带参数表示当前位置注：linux严格区分大小写linux接口 GUI接口： 图形接口 Graphic User Interface CLI接口： 命令提示符 prompt bash(shell)#:root$:普通用户用户认证 修改密码： #passwd 切换用户： su 用户名su 是switch user的缩写 标准密码： 使用4种类别字符中至少3种 足够长，大于7位 定期更换 循环周期足够大 使用随机字符串 Login: 用户名 用户ID 认证机制：Authentication 授权：Authorization (权限分配) 审计：Audition (日志)]]></content>
      <tags>
        <tag>linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法之二分查找法]]></title>
    <url>%2F2018%2F05%2F28%2F%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95%2F</url>
    <content type="text"><![CDATA[二分查找法简介二分查找法是一种适用于有序数组的算法，因为每次折半查找所以其时间复杂度是O(logn)。二分查找的思路是每次与范围中间的值比较，判断所要查找的值和中间值的大小，缩短判断范围，直到找到所要查找的值为止。1234567891011int BinarySearch(int a[],int length, int num) &#123; int low = 0; int high = length-1; while (low &lt;= high) &#123; int mid = low + (high - low) / 2; if (num &lt; a[mid])high = mid - 1; else if (num &gt; a[mid])low = mid + 1; else return mid; &#125; return -1;&#125; 算法学习很重要的一点是它分为三个方面： 1、理解人使用这个方法的思路2、懂得把方法思路转化为程序语言3、理解算法的优势、能力，以便于在适当场景应用 很可惜的是我们总是停留在第一个阶段，所以下面我打算人为尝试一下从第一个阶段走到第二个阶段。 怎样把方法思路转化为程序语言 每次与范围中间值比较…..直到找到所要查找的值为止 多次比较我们显然可以想到循环，比较可能是关系运算符&lt;,&gt;,==。直到找到所要查找的值为止，直到….为止在程序语言中相当于退出循环，而决定循环退出的条件的就只能是违背花括号则退出，可推测得while(low&lt;=high)刚才说过算法的思路如下： 我们再分析所使用到的数据结构 所要查找的值、中间值 所要查找的值可以直接传进函数，那么这个中间值怎么得到呢？我们需要一个值记录开头的值，一个值记录末尾的值，然后除以2，又由于这个开头的值在循环中只是“相对开头”，所以还要加上其前面的内容，又由于这个中间值是随着查找次数不同变化的，所以显然要在循环内部。 判断所要查找的值和中间值的大小，缩短判断范围 所谓判断所要查找的值和中间值的大小，关键词是判断，表示判断的程序语言是if else语句，那么这值因为是不定的所以它和中间值比较有三种可能性，小于、大于、等于中间值，所以我们能够得到if… else if…else的语句框架，至于缩短判断范围则根据这三种框架有所不同。最简单的一种是这个值刚好等于中间值，此时两者相等，返回中间值即可；如果要查找的值小于中间值，那么中间值和中间值后面的范围可以舍弃掉所以high=mid-1;同理，所查找的值大于中间值则low=mid+1;]]></content>
      <tags>
        <tag>读书笔记</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux文件管理命令笔记]]></title>
    <url>%2F2018%2F05%2F28%2Flinux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[本篇笔记主要是介绍linux文件管理命令、目录管理命令 文件管理touch 用途： 创建文件，改变时间戳 用法： touch 文件名 相关选项： touch -c：不创建文件只改变时间戳 touch -a：改变访问时间和改变时间 touch -m：改变修改时间和改变时间 touch -t：修改到指定时间 nano 用途： 通过文本编辑器创建文件 stat 用途： 显示三个时间戳（访问时间access,修改时间modify,改变时间change） file 用途： 查看文件信息 rm 用途： 删除文件 使用规则： 超级管理员使用的rm是rm -i 要使用非-i选项可以使用-f或者使用\rm 相关选线： rm -r：递归删除可以删除目录 cp 用途： 复制文件到指定位置 用法： cp 源 目标 使用规则: cp file1 file2 file3 //前面个默认都为源，最后一个是目标 只能支持复制一个文件到一个文件，多个文件到一个目录，不允许合并文件 如果目标是一个目录并且存在，将源文件复制目标目录，并且保持原名 如果目标和源都是文件，且目标文件存在，将源文件复制过来覆盖目标文件内容 如果源是多个，目标必须是目录 源默认情况向不能使目录，只能是文件 相关选项： cp -r：递归选项，能够把目录作为源 如果源是目录，目标是文件，则这个文件作为符号链接指向源目录 如果源是目录，目标的名字不存在，相当于把源目录复制过去并且更改为目标名字 cp -f：强制复制，不询问是否更改 cp -i：和-f完全相反，询问是否更改 cp -p：复制时保留时间戳、属主、属组 cp -L：取消链接，直接复制文件（直接复制符号链接得到的还是符号链接） cp -P：保留链接，复制链接（相当于默认） cp -a：归档复制，常用于备份 mv 用途： 移动文件 用法： mv 源 目标 使用规则： 使用mv操作目录不需要像cp一样附加-r选项 不能把目录mv到文件 mv a b：相当于把a文件重命名为b文件 相关选项： mv -t：交换目标和源的位置 install 用途： 复制文件并且更改属性 用法： install 源 目标 使用规则： install的源不能是目录，只能是文件 相关选项： install -d：创建目录 install -t 目标 源：可以把多个文件复制到目录 注：对于超级用户来讲，权限过大容易因为错误操作而造成损失，所以很多命令如cp、mv都有默认的-i选项，提示是否确定进行操作，这些默认选项可以使用type进行查看。 目录管理ls 用途： 显示当前目录下的文件和目录 cd 用途： 切换目录 pwd 用途： 显示当前目录 mkdir 用途： -创建空目录 使用规则： 在同一目录下创建多个分支目录mkdir -pv /mnt/{x/m，y} 相关选项： mkdir -p：一次性创建目录 mkdir -v：显示创建详细信息 rmdir 用途： 删除空目录但是不能删除父目录，如果父目录下只有一个目录可以用-p递归删除 tree 用途： 查看目录树]]></content>
      <tags>
        <tag>linux</tag>
        <tag>linux命令</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络自顶而下方法第一章思维导图]]></title>
    <url>%2F2018%2F05%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E8%80%8C%E4%B8%8B%E6%96%B9%E6%B3%95%E7%AC%AC%E4%B8%80%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>思维导图</tag>
        <tag>计算机网络自顶而下方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ primer第八章思维导图]]></title>
    <url>%2F2018%2F05%2F27%2FC-primer%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[标签： C++ 思维导图]]></content>
      <tags>
        <tag>C++</tag>
        <tag>思维导图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ primer第七章思维导图]]></title>
    <url>%2F2018%2F05%2F27%2FC-primer%E7%AC%AC%E4%B8%83%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[标签 ： C++ 思维导图]]></content>
      <tags>
        <tag>C++</tag>
        <tag>思维导图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ primer第六章思维导图]]></title>
    <url>%2F2018%2F05%2F27%2FC-primer%E7%AC%AC%E5%85%AD%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[标签 ： C++ 思维导图]]></content>
      <tags>
        <tag>C++</tag>
        <tag>思维导图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ primer第四章思维导图]]></title>
    <url>%2F2018%2F05%2F24%2FC-primer%E7%AC%AC%E5%9B%9B%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[标签 ： C++ 思维导图]]></content>
      <tags>
        <tag>C++</tag>
        <tag>思维导图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ primer第二章思维导图]]></title>
    <url>%2F2018%2F05%2F24%2FC-primer%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[标签 ： C++ 思维导图]]></content>
      <tags>
        <tag>C++</tag>
        <tag>思维导图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ primer第八章笔记]]></title>
    <url>%2F2018%2F05%2F18%2FC%2B%2B%20primer%E7%AC%AC%E5%85%AB%E7%AB%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[IO库IO库是用来做什么的 处理输入输出，向设备读取或者写入数据，这些设备可以是文件、控制台窗口、string IO库有哪些设施 IO类型间的关系无论是从控制台、文件读取对象；还是读取char或者string对象都使用一样的IO操作，这是因为IO标准库定义了继承机制，继承机制有一个特点就是派生类对象能像基类对象一样使用。 因为iftream和istringstream都继承自istream，所以ifstream和istringstream对象的很多操作和istream一样，但是派生类也会有一些不同于基类的新功能。 IO类IO库特性 IO对象无拷贝或者赋值（函数的形参和返回类型不能是IO类型）进行IO操作的函数通常以引用方式传递流类型因为读写会改变IO所以传递返回的引用不能够是const类型 IO库的条件状态IO库的条件状态能够表示IO流是否出错，错误类型是什么，能否修复。类型： iostate 表示条件状态cin.rdstate() 返回iostatebadbit 表示系统级错误，一旦被置位不可用,此时failbit 也被置位failbit 表示可恢复错误（比如输入类型不对）eofbit 达到文件结束，同时 failbit也会被置位goodbit 表示流未发生错误cin.bad() 如果badbit被置位返回true 注意：badbit,failbit,eofbit任意一个被置位则流的状态检验while(cin&gt;&gt;word)会失败.while(cin&gt;&gt;word)相当于while(!=fail()) 管理条件状态记录当前状态1auto old_state=cin.rdstate();//记住cin的当前状态 置为原有状态1cin.setstate(old_state);//将cin还原为原有状态 清除所有错误标志位1cin.clear();//此时调用good会返回true 复位单一的状态位1cin.clear(cin.rdstate() &amp; ~cin.failbit &amp; ~cin.badbit);//第一位读出当前状态，后面的按位复位 管理输出缓冲为什么有缓冲区：因为设备的写操作很费时，所以把多个输出操作组合成单一的写操作可以带来性能提升，由此引入缓冲区为多个输出操作提供缓存。 比如:cout&lt;&lt;”hello” 字符串”hello”有可能被放入缓冲区 缓冲区刷新的原因： main函数return时缓冲区满的时候，为了写入新的数据显式刷新关联流，会导致关联到的流刷新（cin和cerr关联cout，刷新时cout刷新） 注：程序崩溃，缓冲区不会刷新，所以不会打印 缓冲区显式刷新的例子 endl 打印换行后刷新flush 直接刷新ends 打印空格后刷新unitbuf 每次写立即刷新缓冲区nounitbuf 回到正常模式 文件输入输出文件输入输出由fstream头文件管理，fstream由于继承自iostream所以大部分操作和iostream一样，但是有一些新的成员来管理文件 fstream特有操作 fstream f1; //定义一个未绑定的文件流f1fstream f1(s); //把名为s的文件绑定到文件流f1f1.open(s1); //与上同f1.close(); 注：接收ostream&amp;的参数可以传递ofstream 成员函数open和close检查open打开文件是否成功123ofstream out;//创建文件输出流out.open(file);//将流与文件关联if(out);//检查open是否成功 注：不能两次open同一个文件流，需要先close。但是如果在局部作用域如for中，则不用close因为局部作用域自动创建销毁。 文件模式 in以读的方式打开out以写的方式打开app每次写操作定位到文件末尾ate打开文件后定位到文件末尾trunc截断文件binary以二进制的方式进行IO ofstram默认被截断12345678ofstream out("file1");ofstream out("file1",ofstream::out);ofstream out("file1",ofstream::out|ofstream::trunc);//以上三种均被截断......................................................................................ofstream out("file1",ofstream::out|ofstream::app);ofstream out;out.open("file1",ofstream::app);//以上两种不会被覆盖。用app可以保留之前写的文件内容，下一次写从末尾开始 string流string流由头文件sstream管理，头文件有ostringstream、istringstream、stringstream三个类 stringstream特有操作 sstream strm;//定义一个string流sstream strm(s);//定义一个string流保存string s的一个拷贝strm.str();//返回strm保存的string拷贝strm.str(s);//将s这个string的拷贝保存到strm这个流对象，返回void 使用istringstream123456789101112131415struct PersonInfo&#123; string name; vector&lt;string&gt; phones;&#125;;//定义一个结构体每个人有多个电话号码...string line,word;vector&lt;PersonInfo&gt; people; //用于存储多个结构体信息while(getline(cin,line))&#123; //每次从控制台读取一行给line这个string PersonInfo info; //定义一个保存记录的对象 istringstream record(line); //将记录绑定到刚刚读入的行 record&gt;&gt;info.name(); //读取名字 while(record&gt;&gt;word) //读取多个电话号码 info.phones.push_back(word); people.push_back(info); //将所有记录保存&#125; 使用ostringstream12345ostringstream os;string str1="hello";string str2="world";os&lt;&lt;str1&lt;&lt;" "&lt;&lt;str2;cout&lt;&lt;os.str()&lt;&lt;endl; //输出hello world]]></content>
      <tags>
        <tag>C++</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
</search>
